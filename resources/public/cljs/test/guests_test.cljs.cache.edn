{:rename-macros {}, :renames {}, :use-macros {are cljs.test, is cljs.test, deftest cljs.test}, :excludes #{}, :name test.guests-test, :imports nil, :requires {cljs.test cljs.test, rf-test day8.re-frame.test, day8.re-frame.test day8.re-frame.test, re-frame re-frame.core, re-frame.core re-frame.core, events pozn-adaptive.events, pozn-adaptive.events pozn-adaptive.events, subs pozn-adaptive.subs, pozn-adaptive.subs pozn-adaptive.subs}, :cljs.spec/speced-vars [], :uses nil, :defs {test-guests {:protocol-inline nil, :meta {:file "/home/aleksandr/projects/pozn-adaptive/src/cljs/test/guests_test.cljs", :line 39, :column 10, :end-line 39, :end-column 21}, :name test.guests-test/test-guests, :variadic false, :file "/home/aleksandr/projects/pozn-adaptive/src/cljs/test/guests_test.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists nil, :test true}}, :cljs.spec/registry-ref [], :require-macros {cljs.test cljs.test, rf-test day8.re-frame.test, day8.re-frame.test day8.re-frame.test}, :cljs.analyzer/constants {:seen #{:tables-view :sum_price first :sale-receipts-layout :pozn-adaptive.events/select-all-dish-one-guest last = :sale-receipts :guest-id :table :dates :dishes test.guests-test :layout :active-dish-in-receipt :pozn-adaptive.subs/active-receipt-sum-and-payment :payment :ns :name :select-mod sale-receipts :file get :end-column :menu-items :active-receipt test-guests active-guest-map :type :pozn-adaptive.events/select-dish-in-receipt :pozn-adaptive.events/delete-selected-dishes :tables :table-areas second :cash :guests :pozn-adaptive.events/activate-guest :pozn-adaptive.subs/give-all-guests :short_name :pozn-adaptive.events/change-dish-count-in-receipt :sum-price all-guests :column :card active-receipt :fail test.guests-test/test-guests :pozn-adaptive.subs/active-guest-map :line not :pozn-adaptive.events/add-new-dish :label :id vals clojure.core/deref :count :expected :pozn-adaptive.subs/sale-receipts :send re-frame/subscribe :end-line :pozn-adaptive.events/replace-dishes-to-new-receipt active-receipt-sum-and-payment :active-table :paid? :active-menu-item :error :origin keys :pass :pay :sent? :pozn-adaptive.subs/active-receipt :arglists :pozn-adaptive.events/add-new-guest :actual :pozn-adaptive.subs/give-sum-of-specified-guest :doc count :price :active-guest :selected? :test :menu-item-id :message :test.guests-test/initialize-test-db}, :order [:test.guests-test/initialize-test-db :tables-view :sale-receipts :layout :active-dish-in-receipt :select-mod :menu-items :active-receipt :table-areas :active-table :active-menu-item :active-guest :id :guests :table :payment :sum_price :paid? :sent? :dates :dishes :guest-id :menu-item-id :name :count :selected? :price :cash :card :origin :send :pay :sale-receipts-layout :short_name :label :tables :pozn-adaptive.subs/active-guest-map :pozn-adaptive.subs/give-all-guests :pozn-adaptive.subs/sale-receipts :pozn-adaptive.subs/active-receipt :pozn-adaptive.subs/active-receipt-sum-and-payment :pozn-adaptive.events/add-new-guest :type :expected :actual :message :error = last keys clojure.core/deref all-guests :pass :fail not vals :pozn-adaptive.events/add-new-dish :pozn-adaptive.events/change-dish-count-in-receipt first active-guest-map :pozn-adaptive.events/activate-guest second :pozn-adaptive.events/select-all-dish-one-guest :pozn-adaptive.events/delete-selected-dishes count :pozn-adaptive.events/select-dish-in-receipt :pozn-adaptive.events/replace-dishes-to-new-receipt sale-receipts active-receipt get re-frame/subscribe :pozn-adaptive.subs/give-sum-of-specified-guest :sum-price active-receipt-sum-and-payment test.guests-test/test-guests :ns :file :end-column :column :line :end-line :arglists :doc :test test.guests-test test-guests]}, :doc nil}